# version: v1.6.2
# metadata -- add as many key/value pairs as you want
[metadata]
  description = "Malmo meetup demo"


# paths to the certificate for connecting to the cluster
# You can skip this if you use Helmsman on a machine with kubectl already connected to your k8s cluster.
# you have to use exact key names here : 'caCrt' for certificate and 'caKey' for the key and caClient for the client certificate
[certificates]
 caClient = "gs://helmsman-demo-k8s-key-store/keys/cluster_client_certificate.crt" 
 caCrt = "gs://helmsman-demo-k8s-key-store/keys/cluster_ca.crt" 
 caKey = "gs://helmsman-demo-k8s-key-store/keys/cluster_client_key.key" 


[settings]
 kubeContext = "demo" # will try connect to this context first, if it does not exist, it will be created using the details below
 username = "admin"
 password = "$K8S_PASSWORD" # the name of an environment variable containing the k8s password
 clusterURI = "$K8S_URI" # the name of an environment variable containing the cluster API
 serviceAccount = "tiller" # k8s serviceaccount. If it does not exist, it will be created.
 storageBackend = "secret" # default is configMap


# define your environments and their k8s namespaces
# syntax:
# [namespaces.<your namespace>] -- whitespace before this entry does not matter, use whatever indentation style you like
# protected = <true or false> -- default to false
[namespaces]
  [namespaces.demo]
  [namespaces.protected]
   protected = true
   installTiller = true
   tillerServiceAccount = "tiller-staging" 
   caCert = "gs://helm-tls/ca.cert.pem" # or an env var, e.g. "$CA_CERT_PATH"
   tillerCert = "gs://helm-tls/tiller.cert.pem" # or S3 bucket s3://mybucket/tiller.cert.pem
   tillerKey = "gs://helm-tls/tiller.key.pem"  # or local file secrets/tiller.key.pem
   clientCert = "gs://helm-tls/client.cert.pem"
   clientKey = "gs://helm-tls/client.key.pem"


# define any private/public helm charts repos you would like to get charts from
# syntax: repo_name = "repo_url"
# only private repos hosted in s3 buckets are now supported
[helmRepos]
  stable = "https://kubernetes-charts.storage.googleapis.com"
  incubator = "http://storage.googleapis.com/kubernetes-charts-incubator"
#  myS3repo = "s3://my-S3-private-repo/charts"
#  myGCSrepo = "gs://my-GCS-private-repo/charts"


# define the desired state of your applications helm charts
# each contains the following:
[apps]

  [apps.prometheus]
    description = "Promethues demo instance"
    namespace = "kube-system" 
    enabled = true
    chart = "stable/prometheus"
    version = "7.1.4"
    priority = -6
    wait = true
    protected = true

    [apps.grafana]
    description = "Grafan demo instance"
    namespace = "kube-system" 
    enabled = true
    chart = "stable/grafana"
    version = "1.16.0"
    valuesFile = "values/grafana-values.yaml"
    priority = -5
    wait = true
    protected = true
    [apps.grafana.set]
    "adminPassword"="$GRAFANA_ADMIN_PASSWORD"

  # jenkins will be deployed using the Tiller in the staging namespace
  [apps.jenkins]
    namespace = "demo" # maps to the namespace as defined in namespaces above
    enabled = true # change to false if you want to delete this app release [default = false]
    chart = "stable/jenkins" # changing the chart name means delete and recreate this release
    version = "0.19.0" # chart version
    ### Optional values below
    name = "jenkins" # should be unique across all apps which are managed by the same Tiller
    valuesFile = "values/jenkins-values.yaml" # leaving it empty uses the default chart values
    #tillerNamespace = "kube-system" # which Tiller to use to deploy this release
    purge = false # will only be considered when there is a delete operation
    test = false # run the tests when this release is installed for the first time only
    priority= -3
  [apps.jenkins.setString] # values to override values from values.yaml with values from env vars or directly entered-- useful for passing secrets to charts
    "Master.AdminPassword"="1234567890" # $JENKINS_PASSWORD must exist in the environment
  [apps.jenkins.set]  
    "Master.AdminUser"="sami"


  # # artifactory will be deployed using the Tiller in the kube-system namespace
  # [apps.artifactory]
  #   namespace = "protected" # maps to the namespace as defined in namespaces above
  #   enabled = true # change to false if you want to delete this app release [default = false]
  #   chart = "stable/artifactory" # changing the chart name means delete and recreate this release
  #   version = "7.3.1" # chart version
  #   ### Optional values below
  #   valuesFile = "values/artifactory-values.yaml" # leaving it empty uses the default chart values
  #   priority= -2

# See https://github.com/Praqma/helmsman/blob/master/docs/desired_state_specification.md#apps for more apps options

